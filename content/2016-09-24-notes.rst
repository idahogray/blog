2016-09-24
==========

:date: 2016-09-24 19:00
:modified: 2016-09-24
:tags: GOOSE, python, IEC 61850
:category: work
:summary: Generating GOOSE messages using Python

Generating GOOSE Messages
-------------------------

I want to be able to generate GOOSE messages as part of my network simlulation
testing described in previous posts. My goal is to be able to show how VLANs 
and multicast filtering can affect the reception of GOOSE messages.

I had heard of the `scapy`_ Python library
previously but never found a need to deploy it. I knew that it made it possible
to construct network packets from scratch, bypassing the network stack of the
operating system. I thought that generating GOOSE messages would be a great
application for `scapy`_.

I started playing with `scapy`_ and reached a point where I needed to learn
how the data was encoded in the message. A future post will describe more about
`scapy`_. This post continues with details about encoding the data in the GOOSE
message.


GOOSE Data Encoding
-------------------

I read IEC 61850-8-1 and saw that data was encoded using |asn.1|. According to
`Wikipedia`_, |asn.1| "...describes rules and structures for representing,
encoding, transmitting, and decoding data...". Various ways to encode/decode
the data are provided by |asn.1|. GOOSE messaging has chosen to use |ber|.
|ber| is specified in ITU-T standard X.690. Data encoded in |ber| consists of
three pieces of information.

#. Type

#. Length

#. Contents (or Values)


This is sometimes referred to as the (T, L, V) triple. You can see Wikipedia 
for more information about `ber`_.

I looked for a Python library that could do the |ber| encoding/decoding and 
found `pyasn1`_. The next step was to find the |asn.1| model used by GOOSE.

Searching around led me to this `IEC 61850 ASN.1 encodings page <http://lamspeople.epfl.ch/kirrmann/mms/Documentation/mms_abstract_syntax.htm>`_.
I was able to use those definitions, along with the `pyasn1`_ documentation
to build the GOOSE definitions. The GOOSE definitions are made up of two
main components.

#. `IECGoosePdu <http://lamspeople.epfl.ch/kirrmann/mms/Documentation/mms_abstract_syntax.htm#IEC61850.IECGoosePdu>`_

#. `Data <http://lamspeople.epfl.ch/kirrmann/mms/Documentation/mms_abstract_syntax.htm#ISO-9506-MMS-1.Data>`_

The GOOSE definitions also rely on some subtypes.

* `FloatingPoint <http://lamspeople.epfl.ch/kirrmann/mms/Documentation/mms_abstract_syntax.htm#ISO-9506-MMS-1.FloatingPoint>`_

* `TimeOfDay <http://lamspeople.epfl.ch/kirrmann/mms/Documentation/mms_abstract_syntax.htm#ISO-9506-MMS-1.TimeOfDay>`_

* `MMSstring <http://lamspeople.epfl.ch/kirrmann/mms/Documentation/mms_abstract_syntax.htm#ISO-9506-MMS-1.MMSString>`_

* `UtcTime <http://lamspeople.epfl.ch/kirrmann/mms/Documentation/mms_abstract_syntax.htm#ISO-9506-MMS-1.UtcTime>`_

Implementation
--------------

The implementation of these |asn.1| rules can be found in the
.. _scapy: http://www.secdev.org/projects/scapy/
.. _Wikipedia: https://en.wikipedia.org/wiki/Abstract_Syntax_Notation_One
.. _pyasn1: http://pyasn1.sourceforge.net/
.. |asn.1| replace:: :abbr:`ASN.1 (Abstract Syntax Notation One)`
.. |ber| replace:: :abbr:`BER (Basic Encoding Rules)`
.. _ber: https://en.wikipedia.org/wiki/X.690#BER_encoding
