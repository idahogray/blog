<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Keith's Blog</title><link>http://idahogray.github.io/blog/</link><description></description><lastBuildDate>Sat, 24 Sep 2016 00:00:00 -0500</lastBuildDate><item><title>2016-09-24</title><link>http://idahogray.github.io/blog/2016-09-24.html</link><description>&lt;div class="section" id="generating-goose-messages"&gt;
&lt;h2&gt;Generating GOOSE Messages&lt;/h2&gt;
&lt;p&gt;I want to be able to generate GOOSE messages as part of my network simlulation
testing described in previous posts. My goal is to be able to show how VLANs
and multicast filtering can affect the reception of GOOSE messages.&lt;/p&gt;
&lt;p&gt;I had heard of the &lt;a class="reference external" href="http://www.secdev.org/projects/scapy/"&gt;scapy&lt;/a&gt; Python library
previously but never found a need to deploy it. I knew that it made it possible
to construct network packets from scratch, bypassing the network stack of the
operating system. I thought that generating GOOSE messages would be a great
application for &lt;a class="reference external" href="http://www.secdev.org/projects/scapy/"&gt;scapy&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I started playing with &lt;a class="reference external" href="http://www.secdev.org/projects/scapy/"&gt;scapy&lt;/a&gt; and reached a point where I needed to learn
how the data was encoded in the message. A future post will describe more about
&lt;a class="reference external" href="http://www.secdev.org/projects/scapy/"&gt;scapy&lt;/a&gt;. This post continues with details about encoding the data in the GOOSE
message.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="goose-data-encoding"&gt;
&lt;h2&gt;GOOSE Data Encoding&lt;/h2&gt;
&lt;p&gt;I read IEC 61850-8-1 and saw that data was encoded using &lt;abbr title="Abstract Syntax Notation One"&gt;ASN.1&lt;/abbr&gt;. According to
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Abstract_Syntax_Notation_One"&gt;Wikipedia&lt;/a&gt;, &lt;abbr title="Abstract Syntax Notation One"&gt;ASN.1&lt;/abbr&gt; &amp;quot;...describes rules and structures for representing,
encoding, transmitting, and decoding data...&amp;quot;. Various ways to encode/decode
the data are provided by &lt;abbr title="Abstract Syntax Notation One"&gt;ASN.1&lt;/abbr&gt;. GOOSE messaging has chosen to use &lt;abbr title="Basic Encoding Rules"&gt;BER&lt;/abbr&gt;.
&lt;abbr title="Basic Encoding Rules"&gt;BER&lt;/abbr&gt; is specified in ITU-T standard X.690. Data encoded in &lt;abbr title="Basic Encoding Rules"&gt;BER&lt;/abbr&gt; consists of
three pieces of information.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Type&lt;/li&gt;
&lt;li&gt;Length&lt;/li&gt;
&lt;li&gt;Contents (or Values)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is sometimes referred to as the (T, L, V) triple. You can see Wikipedia
for more information about &lt;a class="reference external" href="https://en.wikipedia.org/wiki/X.690#BER_encoding"&gt;ber&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I looked for a Python library that could do the &lt;abbr title="Basic Encoding Rules"&gt;BER&lt;/abbr&gt; encoding/decoding and
found &lt;a class="reference external" href="http://pyasn1.sourceforge.net/"&gt;pyasn1&lt;/a&gt;. The next step was to find the &lt;abbr title="Abstract Syntax Notation One"&gt;ASN.1&lt;/abbr&gt; model used by GOOSE.&lt;/p&gt;
&lt;p&gt;Searching around led me to this &lt;a class="reference external" href="http://lamspeople.epfl.ch/kirrmann/mms/Documentation/mms_abstract_syntax.htm"&gt;IEC 61850 ASN.1 encodings page&lt;/a&gt;.
I was able to use those definitions, along with the &lt;a class="reference external" href="http://pyasn1.sourceforge.net/"&gt;pyasn1&lt;/a&gt; documentation
to build the GOOSE definitions. The GOOSE definitions are made up of two
main components.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://lamspeople.epfl.ch/kirrmann/mms/Documentation/mms_abstract_syntax.htm#IEC61850.IECGoosePdu"&gt;IECGoosePdu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://lamspeople.epfl.ch/kirrmann/mms/Documentation/mms_abstract_syntax.htm#ISO-9506-MMS-1.Data"&gt;Data&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The GOOSE definitions also rely on some subtypes.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://lamspeople.epfl.ch/kirrmann/mms/Documentation/mms_abstract_syntax.htm#ISO-9506-MMS-1.FloatingPoint"&gt;FloatingPoint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://lamspeople.epfl.ch/kirrmann/mms/Documentation/mms_abstract_syntax.htm#ISO-9506-MMS-1.TimeOfDay"&gt;TimeOfDay&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://lamspeople.epfl.ch/kirrmann/mms/Documentation/mms_abstract_syntax.htm#ISO-9506-MMS-1.MMSString"&gt;MMSstring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="http://lamspeople.epfl.ch/kirrmann/mms/Documentation/mms_abstract_syntax.htm#ISO-9506-MMS-1.UtcTime"&gt;UtcTime&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="implementation"&gt;
&lt;h2&gt;Implementation&lt;/h2&gt;
&lt;p&gt;The implementation of these &lt;abbr title="Abstract Syntax Notation One"&gt;ASN.1&lt;/abbr&gt; rules can be found on &lt;a class="reference external" href="https://github.com/keith-gray-powereng/goose-asn1"&gt;github&lt;/a&gt;.
The &lt;a class="reference external" href="https://github.com/keith-gray-powereng/goose-asn1/blob/master/goose_asn.py"&gt;goose_asn&lt;/a&gt; file contains the GOOSE &lt;abbr title="Abstract Syntax Notation One"&gt;ASN.1&lt;/abbr&gt; definitions along with some
test code located in the &lt;em&gt;if __name__ == '__main__'&lt;/em&gt; block at the end
of the file. The test code builds the same GOOSE messages that is located
in the packet capture shown in the &lt;a class="reference external" href="https://github.com/keith-gray-powereng/goose-asn1/blob/master/goose.txt"&gt;goose_txt&lt;/a&gt; file. The &lt;a class="reference external" href="https://github.com/keith-gray-powereng/goose-asn1/blob/master/goose.txt"&gt;goose_txt&lt;/a&gt; capture
was taken from a lab test from an actual IED being used in a project.
The test code can recreate the GOOSE message exactly.&lt;/p&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;This implementation is known to be incomplete. There are unimplemented
features of the GOOSE description. Also, it has only ever been tested
against a single captured GOOSE message.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="next-steps"&gt;
&lt;h2&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;The next step in this experiment will be to use this GOOSE message in a network
packet created with &lt;a class="reference external" href="http://www.secdev.org/projects/scapy/"&gt;scapy&lt;/a&gt; and transmit it on a network simulated using Linux
Network Namespaces, as described in earlier posts.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Keith Gray</dc:creator><pubDate>Sat, 24 Sep 2016 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:idahogray.github.io,2016-09-24:blog/2016-09-24.html</guid><category>GOOSE</category><category>python</category><category>IEC 61850</category></item><item><title>2016-09-03</title><link>http://idahogray.github.io/blog/2016-09-03.html</link><description>&lt;div class="section" id="simulations"&gt;
&lt;h2&gt;Simulations&lt;/h2&gt;
&lt;p&gt;I am attempting to figure out how to do some network simulations
using Linux. I learned about network namespaces when I was reading
about Mininet and how it simulates &lt;abbr title="Software Defined Networking"&gt;SDN&lt;/abbr&gt;. Some googling pointed me
to this &lt;a class="reference external" href="http://blog.scottlowe.org/2013/09/04/introducing-linux-network-namespaces/"&gt;article&lt;/a&gt;. It states that network namespaces give you the
ability to have different and separate instances of network interfaces
and routing tables. These instances are completely independent of each
other.&lt;/p&gt;
&lt;div class="note"&gt;
&lt;p class="first admonition-title"&gt;Note&lt;/p&gt;
&lt;p class="last"&gt;Please note that all of the commands shown in this post are run at
the Linux terminal as root. If you are not root, you must add &lt;em&gt;sudo&lt;/em&gt;
in front of each command.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="host-host-ping"&gt;
&lt;h2&gt;Host-Host Ping&lt;/h2&gt;
&lt;p&gt;This &lt;a class="reference external" href="http://blog.scottlowe.org/2013/09/04/introducing-linux-network-namespaces/"&gt;article&lt;/a&gt; makes me think I can do some simulations using
network namespaces. The first thing I want to try is to set up
two network namespaces and have them ping each other. The
network topology is shown below.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
--------         --------
|      |         |      |
|  H1  |&amp;lt;-------&amp;gt;|  H2  |
|      |         |      |
--------         --------
&lt;/pre&gt;
&lt;p&gt;I used the following steps to accomplish that.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ip netns add host1
ip netns add host2
ip link add h1 &lt;span class="nb"&gt;type&lt;/span&gt; veth peer name h2
ip link &lt;span class="nb"&gt;set&lt;/span&gt; h1 netns host1
ip link &lt;span class="nb"&gt;set&lt;/span&gt; h2 netns host2
ip netns &lt;span class="nb"&gt;exec&lt;/span&gt; host1 ip address add 10.0.0.1/24 dev h1
ip netns &lt;span class="nb"&gt;exec&lt;/span&gt; host2 ip address add 10.0.0.2/24 dev h2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The first two commands above create two network namespaces
(host1 and host2).  The purpose of those two namespaces to
simulate two different hosts. The third line creates a Linux
virtual Ethernet port pair. The two interfaces are called
h1 and h2. The fourth and fifth lines assign interface h1
to the host1 namespace and interface h2 to the host2 namespace.
The last two lines assign IP addresses to those two interfaces.&lt;/p&gt;
&lt;p&gt;Once all of that setup is complete, I can ping each &amp;quot;host&amp;quot; from the
other.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ip netns &lt;span class="nb"&gt;exec&lt;/span&gt; host1 ping 10.0.0.2
ip netns &lt;span class="nb"&gt;exec&lt;/span&gt; host2 ping 10.0.0.1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;These two &amp;quot;hosts&amp;quot; are isolated from each other. Their interfaces do
not appear on my default host when I run &lt;em&gt;ip address`&lt;/em&gt;. They
can only communicate with each other because of the virtual Ethernet
Port pair that was created. I understand the virtual Ethernet Port pair
to basically be two ports that are directly connected to each other.
Data into one comes out the other and vice versa.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="bridge"&gt;
&lt;h2&gt;Bridge&lt;/h2&gt;
&lt;p&gt;Now that I can set up two &amp;quot;hosts&amp;quot; to talk to each other, I want to
add a Bridge (switch) to the topology. The topology is shown below.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
--------         ---------         --------
|      |         |       |         |      |
|  H1  |&amp;lt;-------&amp;gt;|1 SW1 2|&amp;lt;-------&amp;gt;|  H2  |
|      |         |       |         |      |
--------         ---------         --------
&lt;/pre&gt;
&lt;p&gt;The commands below assume starting from scratch and do not build
upon the commands above.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ip netns add host1
ip netns add host2
ip netns add sw1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The commands above create the network namespaces for the two hosts
and the switch.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ip link add h1 &lt;span class="nb"&gt;type&lt;/span&gt; veth peer name sw1p1
ip link add h2 &lt;span class="nb"&gt;type&lt;/span&gt; veth peer name sw1p2
ip link add bridge1 &lt;span class="nb"&gt;type&lt;/span&gt; bridge
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The commands above create two virtual Ethernet port pairs plus one
Ethernet bridge. The first virtual Ethernet pair is the
the link between H1 and SW1. The second is for the link
between H2 and SW2. The bridge will be used on the switch.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ip link &lt;span class="nb"&gt;set&lt;/span&gt; h1 netns host1
ip link &lt;span class="nb"&gt;set&lt;/span&gt; h2 netns host2
ip link &lt;span class="nb"&gt;set&lt;/span&gt; sw1p1 netns sw1
ip link &lt;span class="nb"&gt;set&lt;/span&gt; sw1p2 netns sw1
ip link &lt;span class="nb"&gt;set&lt;/span&gt; bridge1 netns sw1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The commands above assign the interfaces to the appropriate network
namespaces. h1 goes in host1. h2 goes in host2. sw1p1 and sw1p2 go
in sw1. Finally, the bridge interface goes in sw1.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ip netns &lt;span class="nb"&gt;exec&lt;/span&gt; sw1 ip link &lt;span class="nb"&gt;set&lt;/span&gt; sw1p1 master bridge1
ip netns &lt;span class="nb"&gt;exec&lt;/span&gt; sw1 ip link &lt;span class="nb"&gt;set&lt;/span&gt; sw1p2 master bridge1
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The commands above assign the two ports, sw1p1 and sw1p2, to
the bridge bridge1.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ip netns &lt;span class="nb"&gt;exec&lt;/span&gt; host1 ip link &lt;span class="nb"&gt;set&lt;/span&gt; h1 up
ip netns &lt;span class="nb"&gt;exec&lt;/span&gt; host2 ip link &lt;span class="nb"&gt;set&lt;/span&gt; h2 up
ip netns &lt;span class="nb"&gt;exec&lt;/span&gt; sw1 ip link &lt;span class="nb"&gt;set&lt;/span&gt; bridge1 up
ip netns &lt;span class="nb"&gt;exec&lt;/span&gt; sw1 ip link &lt;span class="nb"&gt;set&lt;/span&gt; sw1p1 up
ip netns &lt;span class="nb"&gt;exec&lt;/span&gt; sw1 ip link &lt;span class="nb"&gt;set&lt;/span&gt; sw1p2 up
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The commands above bring all of the interfaces up.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ip netns &lt;span class="nb"&gt;exec&lt;/span&gt; host1 ip address add 10.0.0.1/24 dev h1
ip netns &lt;span class="nb"&gt;exec&lt;/span&gt; host2 ip address add 10.0.0.2/24 dev h2
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The commands above assign IP addresses to host1 and host2.&lt;/p&gt;
&lt;p&gt;Once all of that setup is complete, I can ping each &amp;quot;host&amp;quot; from the
other.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;ip netns &lt;span class="nb"&gt;exec&lt;/span&gt; host1 ping 10.0.0.2
ip netns &lt;span class="nb"&gt;exec&lt;/span&gt; host2 ping 10.0.0.1
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Keith Gray</dc:creator><pubDate>Sat, 03 Sep 2016 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:idahogray.github.io,2016-09-03:blog/2016-09-03.html</guid><category>rstp</category><category>linux</category><category>network namespaces</category></item><item><title>2016-09-02</title><link>http://idahogray.github.io/blog/2016-09-02.html</link><description>&lt;div class="section" id="today"&gt;
&lt;h2&gt;Today&lt;/h2&gt;
&lt;p&gt;I am continuing to research &lt;abbr title="Rapid Spanning Tree Protocol"&gt;RSTP&lt;/abbr&gt;
in an effort to produce a design guide at work.
I started the guide and realized I don't know as much as I
thought about &lt;abbr title="Rapid Spanning Tree Protocol"&gt;RSTP&lt;/abbr&gt;.&lt;/p&gt;
&lt;p&gt;&lt;abbr title="Spanning Tree Protocol"&gt;STP&lt;/abbr&gt;, &lt;abbr title="Rapid Spanning Tree Protocol"&gt;RSTP&lt;/abbr&gt;'s predicessor was originally defined in IEEE 802.1D.
&lt;abbr title="Rapid Spanning Tree Protocol"&gt;RSTP&lt;/abbr&gt; was initially defined in IEEE 802.1w. However, IEEE 802.1w was
incorporated into the 2004 version of IEEE 802.1D. &lt;abbr title="Spanning Tree Protocol"&gt;STP&lt;/abbr&gt; was removed from
IEEE 802.1D-2004.&lt;/p&gt;
&lt;p&gt;I printed out the IEEE 802.1D-2004 standard and have begun reviewing it.
This is one that is going to take a few readings to fully understand.
I am trying to keep notes as I go through it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ieee-802-1d-2004"&gt;
&lt;h2&gt;IEEE 802.1D-2004&lt;/h2&gt;
&lt;p&gt;&lt;abbr title="Rapid Spanning Tree Protocol"&gt;RSTP&lt;/abbr&gt; is defined in Clause 17 of IEEE 802.1D-2004. Item i) in 17.1 is
interesting. It states &amp;quot;In normal operation, the time taken to configure the
active topology of a network comprising point-to-point LANs is independent of
the timer values of the protocol.&amp;quot;. I am curious what &amp;quot;normal operation&amp;quot;
referrs to.&lt;/p&gt;
&lt;p&gt;Clause 17.2 referrs to Clause 7.12.3 which defines the Group MAC Address
that identifies the Spanning Tree Protocol. This MAC address is called as
the &lt;strong&gt;Bridge Group Address&lt;/strong&gt; and is defined as 01-80-C2-00-00-00. This adress
is a Multicast Ethernet Address because the least-significant bit of the first
octet is a 1.&lt;/p&gt;
&lt;div class="section" id="port-states"&gt;
&lt;h3&gt;Port States&lt;/h3&gt;
&lt;p&gt;Clause 17.3 references Clause 7.4 to define the port states controlled by
&lt;abbr title="Rapid Spanning Tree Protocol"&gt;RSTP&lt;/abbr&gt;. The port states defined by IEEE 802.1D-2004 are:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Discarding&lt;/dt&gt;
&lt;dd&gt;Any port that is not enabled or has been dynamically excluded from
forwarding and learning from MAC frames.&lt;/dd&gt;
&lt;dt&gt;Learning&lt;/dt&gt;
&lt;dd&gt;Any port where Learning is enabled for Forwarding is disabled.&lt;/dd&gt;
&lt;dt&gt;Forwarding&lt;/dt&gt;
&lt;dd&gt;Any port that both learns and forwards frames.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="priority-vectors"&gt;
&lt;h3&gt;Priority Vectors&lt;/h3&gt;
&lt;p&gt;Clause 17.3 references Clause 17.5 to define &lt;abbr title="Rapid Spanning Tree Protocol"&gt;RSTP&lt;/abbr&gt; Priority Vectors.
The Priority Vector is the information sent by each switch when selecting
the Root Bridge and the shortest path to it. Priority Vectors contain the
following information:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Root Bridge Identifier&lt;/dt&gt;
&lt;dd&gt;The Bridge Identifier of the Bridge believed to be the Root by the
transmitter.&lt;/dd&gt;
&lt;dt&gt;Root Path Cost&lt;/dt&gt;
&lt;dd&gt;Path cost from the transmitting Bridge what is believed to be the Root
Bridge.&lt;/dd&gt;
&lt;dt&gt;Bridge Identifier&lt;/dt&gt;
&lt;dd&gt;Bridge Identifier of the transmitting Bridge&lt;/dd&gt;
&lt;dt&gt;Port Identifier&lt;/dt&gt;
&lt;dd&gt;Port through which the message was transmitted&lt;/dd&gt;
&lt;dt&gt;Port Identifier&lt;/dt&gt;
&lt;dd&gt;Port through which the message was received (where relevant)&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="port-roles"&gt;
&lt;h3&gt;Port Roles&lt;/h3&gt;
&lt;div class="warning"&gt;
&lt;p class="first admonition-title"&gt;Warning&lt;/p&gt;
&lt;p class="last"&gt;This section will need more development as I get further into this.
See the &lt;strong&gt;WTF?&lt;/strong&gt; items.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Clause 17.3 references Clause 17.7 to define the port roles. The Port Roles
defined by IEEE 802.1D-2004 are:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Disabled Port&lt;/dt&gt;
&lt;dd&gt;Port is disabled if it is not operational or if it is excluded from the
active topology by management. This can occur if the MAC_Operational status
is False, if it is disabled by 802.1X, or if it is disabled by the
administrator.&lt;/dd&gt;
&lt;dt&gt;Root Port&lt;/dt&gt;
&lt;dd&gt;The source of the root priority vector is the Root Port on every bridge
except the Root Bridge. The Root Bridge does not have a Root Port. This is
the one port on the Bridge that provides the lowest cost path to the
Root Bridge.&lt;/dd&gt;
&lt;dt&gt;Designated Port&lt;/dt&gt;
&lt;dd&gt;Port whose port priority vector is its designated priority vector
(&lt;strong&gt;WTF?&lt;/strong&gt;). This is the one port attached to each LAN that provides the
lowest cost path from that LAN to the Root Bridge.&lt;/dd&gt;
&lt;dt&gt;Alternate Port&lt;/dt&gt;
&lt;dd&gt;Port (not including the Root Port) whose priority vector has been received
from another Bridge is an Alternate Port (&lt;strong&gt;WTF?&lt;/strong&gt;). Ports that can provide
connectivity if other network components fail.&lt;/dd&gt;
&lt;dt&gt;Backup Port&lt;/dt&gt;
&lt;dd&gt;Port that has a priority vector that has been received from another port
on this Bridge (&lt;strong&gt;WTF?&lt;/strong&gt;). Ports that can provide connectivity if other
network components fail.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="edge-ports"&gt;
&lt;h3&gt;Edge Ports&lt;/h3&gt;
&lt;p&gt;Bridge ports attached to a LAN that has no other Bridges attached to it
may be administratively configured as an Edge Port. Edge Ports transition
directly to the Forwarding Port State since there is no possibility of it
participating in a loop.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I made it Clause 17.3.2 which contains example topologies. I will be studying
this over the weekend.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Keith Gray</dc:creator><pubDate>Fri, 02 Sep 2016 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:idahogray.github.io,2016-09-02:blog/2016-09-02.html</guid><category>rstp</category></item><item><title>2016-09-01</title><link>http://idahogray.github.io/blog/2016-09-01.html</link><description>&lt;div class="section" id="today"&gt;
&lt;h2&gt;Today&lt;/h2&gt;
&lt;p&gt;I watched a really interesting video about Python last night.
I recommend anyone interested in Python check this video out.
&lt;a class="reference external" href="https://www.youtube.com/watch?v=j6VSAsKAj98"&gt;Builtin Superheroes&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Keith Gray</dc:creator><pubDate>Fri, 02 Sep 2016 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:idahogray.github.io,2016-09-02:blog/2016-09-01.html</guid><category>python</category></item><item><title>2016-08-31</title><link>http://idahogray.github.io/blog/2016-08-31.html</link><description>&lt;div class="section" id="today"&gt;
&lt;h2&gt;Today&lt;/h2&gt;
&lt;p&gt;I did some more research on &lt;abbr title="Software Defined Networking"&gt;SDN&lt;/abbr&gt; today. I learned that my suspicion was correct
in that if a port fails the switch would have to request a new flow from the controller.
This would significantly increase the failover time, I read some examples of 300ms.
Obviously this is too slow for protection applications and is even slower than
&lt;abbr title="Rapid Spanning Tree Protocol"&gt;RSTP&lt;/abbr&gt;.&lt;/p&gt;
&lt;p&gt;However, version 1.1 of the OpenFlow standard introduced the idea of &lt;em&gt;Groups&lt;/em&gt;.
According to this &lt;a class="reference external" href="https://floodlight.atlassian.net/wiki/display/floodlightcontroller/How+to+Work+with+Fast-Failover+OpenFlow+Groups"&gt;article&lt;/a&gt;,
OpenFlow Fast Failover groups are specifically meant to address this issue.
The article says the failover times are not defined by the standard but
are meant to be faster than having to request a new flow from the controller.&lt;/p&gt;
&lt;p&gt;I believe this is how &lt;a class="reference external" href="http://selinc.com"&gt;SEL&lt;/a&gt; is achieving &lt;span class="formula"&gt;100&lt;i&gt;μ&lt;/i&gt;&lt;i&gt;S&lt;/i&gt;&lt;/span&gt;
failover times with their &lt;abbr title="Software Defined Networking"&gt;SDN&lt;/abbr&gt; switch product.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Keith Gray</dc:creator><pubDate>Wed, 31 Aug 2016 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:idahogray.github.io,2016-08-31:blog/2016-08-31.html</guid><category>work networking sdn</category></item><item><title>2016-08-30 Notes</title><link>http://idahogray.github.io/blog/2016-08-30-notes.html</link><description>&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="http://selinc.com"&gt;SEL&lt;/a&gt; is introducing a new networking product for the
utility market based on &lt;abbr title="Software Defined Networking"&gt;SDN&lt;/abbr&gt;.
The fact that this technology is making it into the electric utility
industry is pretty amazing considering how new it is.&lt;/p&gt;
&lt;p&gt;A recent &lt;a class="reference external" href="https://selinc.com/company/news/116217/"&gt;article&lt;/a&gt; sparked some
conversation inside my group at work. I decided I should do some more
research. I started reading about &lt;abbr title="Software Defined Networking"&gt;SDN&lt;/abbr&gt; by purchasing
&lt;a class="reference external" href="https://www.packtpub.com/networking-and-servers/software-defined-networking-openflow"&gt;Software Defined Networking with OpenFlow&lt;/a&gt;.
This book served as a good introduction to &lt;abbr title="Software Defined Networking"&gt;SDN&lt;/abbr&gt; and using a
simulation platform called &lt;a class="reference external" href="http://mininet.org/"&gt;Mininet&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One question I still have is how to achieve fast failovers with &lt;abbr title="Software Defined Networking"&gt;SDN&lt;/abbr&gt;.&lt;/p&gt;
&lt;p&gt;I plan to keep researching this and playing with the simulations.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Keith Gray</dc:creator><pubDate>Tue, 30 Aug 2016 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:idahogray.github.io,2016-08-30:blog/2016-08-30-notes.html</guid><category>work networking sdn</category></item><item><title>Writing a OPC Client</title><link>http://idahogray.github.io/blog/writing-a-opc-client.html</link><description>&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;OPC is something I see quite often in my job as a SCADA engineer.
Up until recently, all I knew about OPC was that it relied on
Microsoft Windows' Object Linking and Embedding (OLE).
In fact OPC is short for &lt;strong&gt;O&lt;/strong&gt;LE for &lt;strong&gt;P&lt;/strong&gt;rocess Control.
Even though OPC was always a problem on projects,
I thought of it as a black box because of its relationship to
Windows.&lt;/p&gt;
&lt;p&gt;However, on a recent project, I had the need to automate some tests.
I had two choices:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Develop or purchase a DNP3 communication library to communicate with
the device being tested.&lt;/li&gt;
&lt;li&gt;Use an OPC Server to speak DNP3 and then get the data out of the OPC
server.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I had previously looked into what it would take to develop a DNP3
driver and it wasn't going to be cheap or easy. I needed this
application and I needed it yesterday. Therefore, I decided to
investigate what it would take to communicate with the OPC server.&lt;/p&gt;
&lt;div class="section" id="background"&gt;
&lt;h3&gt;Background&lt;/h3&gt;
&lt;p&gt;I have quite a bit of Python programming experience and I knew
that the pywin32 library supported Windows COM. COM is what
OPC uses for communication on a Windows system.&lt;/p&gt;
&lt;p&gt;I spent one weekend poking around on Google, playing with pywin32,
and using the demo mode of the Kepware OPC platform. I was able to
connect to the kepware server and get data out of it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="opc-client"&gt;
&lt;h2&gt;OPC Client&lt;/h2&gt;
&lt;p&gt;The OPC client I am going to show here is by no means a complete
implementation. However, this simple application met the needs
of my project and is relatively simple to get set up.&lt;/p&gt;
&lt;div class="section" id="prerequisites"&gt;
&lt;h3&gt;Prerequisites&lt;/h3&gt;
&lt;p&gt;This application was written on a Windows 7 machine. I have started
using the Anaconda python distribution on Windows because it is
so easy to get the packages I need installed without having a full
C/C++ development environment. The pywin32 library is required and
can be installed via anaconda.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ conda install pywin32
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is also required to have the OPC Server configured. In this case,
I simply created a channel and device in the Kepware server. The channel
used the Simulator driver and I named it 'Simulator'. I also named the
device 'Simulator'.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-code"&gt;
&lt;h3&gt;The Code&lt;/h3&gt;
&lt;p&gt;The code below is really simple. It connects to the Kepware OPC client,
creates a group, adds one binary tag to the group, retrieves the value,
quality, and timestamp of the tag (which should be False), writes a value
of True to the tag, then rereads the value, quality, and timestamp. Finally
it disconnects from the OPC Server.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;win32com&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;
&lt;span class="n"&gt;opc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Dispatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;OPC.Automation.1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;opc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;KEPware.KEPServerEX.V5&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;opc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OPCGroups&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Test Group&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IsActive&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;group&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OPCItems&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AddItem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Simulator.Simulator.K0000.00&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;quality&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constants&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OPCDevice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Value: {}; Quality: {}; Time: {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;quality&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;quality&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;constants&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;OPCDevice&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Value: {}; Quality: {}; Time: {}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;quality&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;opc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Disconnect&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="what-s-next"&gt;
&lt;h2&gt;What's Next&lt;/h2&gt;
&lt;p&gt;OPC has a lot more options than just reading or writing to a single point
at a time. Your client can subscribe to events and get notified when a
point value changes. I didn't make use of that functionality in my
project but I probably will in the future.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Keith Gray</dc:creator><pubDate>Sun, 09 Mar 2014 00:00:00 -0600</pubDate><guid isPermaLink="false">tag:idahogray.github.io,2014-03-07:blog/writing-a-opc-client.html</guid><category>python programming work</category></item><item><title>Arduino and Raspberry Pi</title><link>http://idahogray.github.io/blog/arduino-and-raspberry-pi.html</link><description>&lt;p&gt;My father, brother, and I are starting to have weekly or bi-weekly sessions so I can teach them
about the arduino and raspberry pi. It will also give us a scheduled time to work on a project.
Finally, it will be good time spent together for the three of us.&lt;/p&gt;
&lt;div class="section" id="session-1-agenda-and-links"&gt;
&lt;h2&gt;Session 1 Agenda and Links&lt;/h2&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p class="first"&gt;Introduction to the &lt;a class="reference external" href="http://arduino.cc"&gt;Arduino&lt;/a&gt; boards and software&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Uno&lt;/li&gt;
&lt;li&gt;Leonardo&lt;/li&gt;
&lt;li&gt;Others&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Install the &lt;a class="reference external" href="http://arduino.cc/en/Main/Software"&gt;Arduino Software&lt;/a&gt; in Windows or Linux&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Connect the Arduino to the PC and make sure the software can communicate with it&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Choose the Leonardo from the list of boards&lt;/li&gt;
&lt;li&gt;Choose the correct serial port&lt;/li&gt;
&lt;li&gt;Choose the blink example from the menus, compile it, and send it to the Arduino&lt;/li&gt;
&lt;li&gt;Make sure there are no errors&lt;/li&gt;
&lt;li&gt;Make sure the onboard LED connected to pin 13 is blinking&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Visually insped the code and describe how it works&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Declaring constants (different than what is in the examples)&lt;/li&gt;
&lt;li&gt;setup function&lt;/li&gt;
&lt;li&gt;loop function&lt;/li&gt;
&lt;li&gt;Built in function: &lt;a class="reference external" href="http://arduino.cc/en/Reference/PinMode"&gt;pinMode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Built in function: &lt;a class="reference external" href="http://arduino.cc/en/Reference/DigitalWrite"&gt;digitalWrite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Built in function: &lt;a class="reference external" href="http://arduino.cc/en/Reference/Delay"&gt;delay&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Use an external LED&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Wire up and external LED with the correct resistor value&lt;/li&gt;
&lt;li&gt;Alter the Arduino code to choose the correct pin&lt;/li&gt;
&lt;li&gt;Compile and send to the Arduino&lt;/li&gt;
&lt;li&gt;Verify the LED blinks&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Play with the code a little bit&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Make the LED stay on longer&lt;/li&gt;
&lt;li&gt;Make the LED stay off longer&lt;/li&gt;
&lt;li&gt;Make the LED blink faster with equal on/off times (duty cycle)&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Talk about Pulse Width Modulation (PWM) (A form of analog output)&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Built in function: &lt;a class="reference external" href="http://arduino.cc/en/Reference/AnalogWrite"&gt;analogWrite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Use PWM to fade an LED&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Open the Fade example from the Arduino IDE menu&lt;/li&gt;
&lt;li&gt;Inspect the code to see what it does&lt;/li&gt;
&lt;li&gt;Set the led pin correctly in the code for how the LED is connected&lt;/li&gt;
&lt;li&gt;Compile and send the code to the Arduino&lt;/li&gt;
&lt;li&gt;Verify the LED fades in and out&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;Play with the code a little bit&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Make it take longer to fade in and out&lt;/li&gt;
&lt;li&gt;Make it fade faster&lt;/li&gt;
&lt;li&gt;Make it so it only fades out and then goes immediately to full brightness again&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class="section" id="references"&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Keith Gray</dc:creator><pubDate>Sat, 04 Jan 2014 00:00:00 -0600</pubDate><guid isPermaLink="false">tag:idahogray.github.io,2014-01-04:blog/arduino-and-raspberry-pi.html</guid><category>arduino</category></item><item><title>2014 Goals</title><link>http://idahogray.github.io/blog/2014-goals.html</link><description>&lt;p&gt;I don't like the idea of new years resolutions but I do think this is a good
oppportunity to set some goals for the new year. I am not sure if that is
different than resolutions, but it is in my head.&lt;/p&gt;
&lt;div class="section" id="goals-for-2014"&gt;
&lt;h2&gt;Goals for 2014&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Continue to get as close to &amp;quot;Paleo&amp;quot; eating as possible in order to keep
improving my health&lt;/li&gt;
&lt;li&gt;Add in &amp;quot;Paleo&amp;quot; exercises to my routine&lt;/li&gt;
&lt;li&gt;Travel less (Only making Gold Medallion on Delta in 2014 is the goal)&lt;/li&gt;
&lt;li&gt;Build things with my kids&lt;/li&gt;
&lt;li&gt;Spend more time with Amy, just the two of us&lt;/li&gt;
&lt;li&gt;Finish my garage automation project&lt;/li&gt;
&lt;li&gt;Do stuff around the house without Amy asking me to&lt;ul&gt;
&lt;li&gt;Don't go to bed with any dirty dishes in the sink (hand-wash if needed)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Walk Bella at least 3 times a week, even when the weather is bad/cold&lt;/li&gt;
&lt;li&gt;Reduce the amount of gluten my kids eat&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Keith Gray</dc:creator><pubDate>Wed, 01 Jan 2014 00:00:00 -0600</pubDate><guid isPermaLink="false">tag:idahogray.github.io,2014-01-01:blog/2014-goals.html</guid><category>goals</category></item><item><title>Thoughts On Email</title><link>http://idahogray.github.io/blog/thoughts-on-email.html</link><description>&lt;p&gt;I was listing to this &lt;a class="reference external" href="http://5by5.tv/inbeta/36"&gt;In Beta&lt;/a&gt; episode today while mowing the lawn. Gina and
Kevin were talking about email and getting to Inbox Zero and so on. One of their
comments was that email fails because it is a TODO list that other people can
add items to. This is not the first time I have heard this and I don't know
who originally said it, I couldn't find it in quick Google search. They
also made a comment about training other people that emailing you does not
mean an immediate response is coming.&lt;/p&gt;
&lt;p&gt;This comment got me thinking, again, about how I use email at work. I currently
have about 71 emails that I feel like I need to respond to. This weighs on
me and I can never feel like I am caught up.&lt;/p&gt;
&lt;p&gt;This episode got me thinking about sending an automatic response to incoming
emails. Something like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
Thank you for your email. If this email contains a task you would like
me to complete, I would appreciate it if you would call me. This would allow
us to properly discuss the task, its schedule, my availability, and
possible alternatives if those items don't line up.
&lt;/pre&gt;
&lt;p&gt;The problem with something like this is that I am an Engineering consultant.
We make money by being responsive to clients. The more responsive we can be,
the more likely we are to get repeat business and repeat business is the best
kind.&lt;/p&gt;
&lt;p&gt;I think a good compromise would be to have this response be sent to anyone
inside my company but not to our clients.&lt;/p&gt;
&lt;p&gt;I am just not sure how my peers and managers would respond to something like
this. So much of our business is done over email that this response may appear
to be in bad form. I think an argument could be made that a response like this
is more honest and will possibly generate more realistic discussions about
tasks and schedules than the current alternatives.&lt;/p&gt;
&lt;p&gt;I would like to hear any reader's thoughts, especially from those in similar
businesses.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Keith Gray</dc:creator><pubDate>Sat, 20 Apr 2013 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:idahogray.github.io,2013-04-20:blog/thoughts-on-email.html</guid><category>work email</category></item><item><title>First Bowling Games</title><link>http://idahogray.github.io/blog/first-bowling-games.html</link><description>&lt;p&gt;We took Wyatt and Ava bowling on Saturday. This was the first time for both of them.
They both had a lot of fun and so did &lt;a class="reference external" href="https://plus.google.com/u/0/104461654563341959829"&gt;Amy&lt;/a&gt; and I.&lt;/p&gt;
&lt;p&gt;Please ignore my score. My excuse is that I was helping Wyatt and Ava and therefore
not able to concentrate on my own game.&lt;/p&gt;
&lt;img alt="" src="http://farm9.staticflickr.com/8253/8628196983_d4a0605846.jpg" /&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Keith Gray</dc:creator><pubDate>Sun, 07 Apr 2013 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:idahogray.github.io,2013-04-07:blog/first-bowling-games.html</guid><category>wyatt ava</category></item><item><title>Lego Garbage Truck</title><link>http://idahogray.github.io/blog/lego-garbage-truck.html</link><description>&lt;p&gt;&lt;a class="reference external" href="https://plus.google.com/101549244886183119915"&gt;Nonna&lt;/a&gt; and &lt;a class="reference external" href="https://plus.google.com/u/0/106042062414239481427"&gt;Grandpa&lt;/a&gt; bought Wyatt a garbage truck lego set for Easter this year. Wyatt and I
started building it on Thursday night.  We only made it a few pages into the
instruction book.&lt;/p&gt;
&lt;img alt="" src="http://farm9.staticflickr.com/8533/8604852882_9c53b485ec.jpg" /&gt;
&lt;p&gt;He did really well looking for the pieces that matched the picture in the
instruction book. We played games like &amp;quot;You're getting Warmer&amp;quot; to help him
find the pieces. He pretended his arm was a crane when he found the pieces.&lt;/p&gt;
&lt;p&gt;I had a lot of fun building it and I think he did too. This kit was a little
above his age but he stuck with it. It took 3 days to finish it and he loves it.&lt;/p&gt;
&lt;img alt="" src="http://farm9.staticflickr.com/8528/8604854386_7c3c769cba.jpg" /&gt;
&lt;p&gt;He played with it quite a bit today. He is a little rough with it and it
comes apart sometimes. He repeats what I told him about Legos: &amp;quot;The good
thing about Legos is that you can always put it back together&amp;quot;.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Keith Gray</dc:creator><pubDate>Sat, 30 Mar 2013 00:00:00 -0500</pubDate><guid isPermaLink="false">tag:idahogray.github.io,2013-03-30:blog/lego-garbage-truck.html</guid><category>wyatt lego</category></item><item><title>Saving for College</title><link>http://idahogray.github.io/blog/saving-for-college.html</link><description>&lt;p&gt;Amy and I have been talking about setting up college funds for Wyatt and Ava
for a while now.  As part of our New Years resolutions, we decided to make it
happen this year.  We set up a visit with a financial planner and he guided us
through the process.  As of tonight, both Wyatt and Ava have 529 Plans set
up through the Missouri MOST program.&lt;/p&gt;
&lt;p&gt;Both accounts currently have a $0 balance but that is just until we can move
some money from their savings accounts.&lt;/p&gt;
&lt;p&gt;Next on the list: set up automatic deposit from my paycheck to their new
accounts.&lt;/p&gt;
&lt;div class="section" id="side-note"&gt;
&lt;h2&gt;Side Note&lt;/h2&gt;
&lt;p&gt;According to the software the financial planner used, one year of college for
the kids is projected to cost $66,000 or more.  That is insane.  I guess that
is why we are saving now.&lt;/p&gt;
&lt;/div&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Keith Gray</dc:creator><pubDate>Fri, 22 Feb 2013 00:00:00 -0600</pubDate><guid isPermaLink="false">tag:idahogray.github.io,2013-02-22:blog/saving-for-college.html</guid><category>wyatt ava college</category></item><item><title>Wyatt's 4th Birthday Questions</title><link>http://idahogray.github.io/blog/wyatts-4th-birthday-questions.html</link><description>&lt;dl class="docutils"&gt;
&lt;dt&gt;What is your favorite color?&lt;/dt&gt;
&lt;dd&gt;Red&lt;/dd&gt;
&lt;dt&gt;What is your favorite toy?&lt;/dt&gt;
&lt;dd&gt;Fire Truck&lt;/dd&gt;
&lt;dt&gt;What is your favorite fruit?&lt;/dt&gt;
&lt;dd&gt;Banana&lt;/dd&gt;
&lt;dt&gt;What is your favorite tv show?&lt;/dt&gt;
&lt;dd&gt;Bob the Builder&lt;/dd&gt;
&lt;dt&gt;What is your favorite song?&lt;/dt&gt;
&lt;dd&gt;Jingle Bell Rock and In the Jungle&lt;/dd&gt;
&lt;dt&gt;What is your favorite food?&lt;/dt&gt;
&lt;dd&gt;Fettuccine Alfredo&lt;/dd&gt;
&lt;dt&gt;What is your favorite outfit?&lt;/dt&gt;
&lt;dd&gt;PJs - Bear Brushing His Teeth&lt;/dd&gt;
&lt;dt&gt;What is your favorite game?&lt;/dt&gt;
&lt;dd&gt;Angry Birds&lt;/dd&gt;
&lt;dt&gt;What is your favorite snack?&lt;/dt&gt;
&lt;dd&gt;Wyatt Bars (Kids Cliff Bars)&lt;/dd&gt;
&lt;dt&gt;What is your favorite animal?&lt;/dt&gt;
&lt;dd&gt;Goat, moose, and deer&lt;/dd&gt;
&lt;dt&gt;What is your favorite book?&lt;/dt&gt;
&lt;dd&gt;Fire Truck Book&lt;/dd&gt;
&lt;dt&gt;What is your favorite outside activity?&lt;/dt&gt;
&lt;dd&gt;Play at the playground&lt;/dd&gt;
&lt;dt&gt;What is your favorite dring?&lt;/dt&gt;
&lt;dd&gt;Orange Juice&lt;/dd&gt;
&lt;dt&gt;What is your favorite holiday?&lt;/dt&gt;
&lt;dd&gt;Christmas&lt;/dd&gt;
&lt;dt&gt;What do you want to be when you grow up?&lt;/dt&gt;
&lt;dd&gt;Just want to be a Wyatt&lt;/dd&gt;
&lt;/dl&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Keith Gray</dc:creator><pubDate>Sat, 26 Jan 2013 00:00:00 -0600</pubDate><guid isPermaLink="false">tag:idahogray.github.io,2013-01-26:blog/wyatts-4th-birthday-questions.html</guid><category>wyatt birthday</category></item></channel></rss>